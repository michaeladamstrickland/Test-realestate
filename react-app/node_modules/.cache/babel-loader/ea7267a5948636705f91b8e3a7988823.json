{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\18562\\\\Desktop\\\\real-estate\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\18562\\\\Desktop\\\\real-estate\\\\src\\\\Context.js\";\nimport React, { Component } from 'react';\nimport items from './data';\nimport { async } from 'q';\nconst HomeContext = React.createContext(); // <homeContext.Provider value={}\n\nclass HomeProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      homes: [],\n      sortedhomes: [],\n      // featuredhomes: [],\n      loading: true,\n      type: 'all',\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxPrice: 0,\n      maxSize: 0,\n      minSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getData = async () => {\n      try {\n        let response = await items.getEntries({\n          content_type: \"resorthome\",\n          order: \"sys.createdAt\"\n        }); // this is to get the contentful data\n        // let homes = this.formatData(response.items);\n        // below is the version get the local data\n\n        let homes = this.formatData(items); // let featuredhomes = homes.filter(home => home.featured === true);\n\n        let maxPrice = Math.max(...homes.map(item => item.price));\n        let maxSize = Math.max(...homes.map(item => item.size));\n        this.setState({\n          homes,\n          // featuredhomes,\n          sortedHomes: homes,\n          loading: false,\n          price: maxPrice,\n          maxPrice,\n          maxSize\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    this.getHome = slug => {\n      let tempHomes = [...this.state.homes];\n      const home = tempHomes.find(home => home.slug === slug);\n      return home;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterhomes);\n    };\n\n    this.filterhomes = () => {\n      let _this$state = this.state,\n          homes = _this$state.homes,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets; //    all the homes\n\n      let temphomes = [...homes]; //    trasform values\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); // filter by type\n\n      if (type !== 'all') {\n        temphomes = temphomes.filter(home => home.type === type);\n      } //    filter by capacity\n\n\n      if (capacity !== 1) {\n        temphomes = temphomes.filter(home => home.capacity >= capacity);\n      } // filter by price\n\n\n      temphomes = temphomes.filter(home => home.price <= price); // filter by size\n\n      temphomes = temphomes.filter(home => home.size >= minSize && home.size <= maxSize); // filter by breakfast\n\n      if (breakfast) {\n        temphomes = temphomes.filter(home => home.breakfast === true);\n      } // filter by pets\n\n\n      if (pets) {\n        temphomes = temphomes.filter(home => home.pets === true);\n      } // change state\n\n\n      this.setState({\n        sortedhomes: temphomes\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.getData(); //     let homes = this.formatData(items)\n    //     // console.log(\"homes:\", homes)\n    //     let featuredhomes = homes.filter(home => home.featured === true);\n    //   let maxPrice = Math.max(...homes.map(item=> item.price));\n    //   let maxSize = Math.max(...homes.map(item=> item.size));\n    //     this.setState({\n    //         homes,\n    //         featuredhomes,\n    //         sortedhomes: homes,\n    //         loading: false,\n    //         price:maxPrice,\n    //         maxPrice,\n    //         maxSize,\n    //     });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let home = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return home;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(HomeContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        gethome: this.gethome,\n        handleChange: this.handleChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst HomeConsumer = homeContext.Consumer;\nexport function withHomeConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(HomeConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })));\n  };\n}\nexport { HomeProvider, HomeConsumer, HomeContext };","map":{"version":3,"sources":["C:\\Users\\18562\\Desktop\\real-estate\\src\\Context.js"],"names":["React","Component","items","async","HomeContext","createContext","HomeProvider","state","homes","sortedhomes","loading","type","capacity","price","minPrice","maxPrice","maxSize","minSize","breakfast","pets","getData","response","getEntries","content_type","order","formatData","Math","max","map","item","size","setState","sortedHomes","error","console","log","getHome","slug","tempHomes","home","find","handleChange","event","target","value","checked","name","filterhomes","temphomes","parseInt","filter","componentDidMount","tempItems","id","sys","images","fields","image","file","url","render","gethome","props","children","HomeConsumer","homeContext","Consumer","withHomeConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport items from './data';\n\nimport { async } from 'q';\n\n\n\n\nconst HomeContext = React.createContext();\n// <homeContext.Provider value={}\nclass HomeProvider extends Component {\n    state = {\n        homes: [],\n        sortedhomes: [],\n        // featuredhomes: [],\n        loading: true,\n        type: 'all',\n        capacity:1,\n        price:0,\n        minPrice:0,\n        maxPrice:0,\n        maxSize:0,\n        minSize:0,\n        breakfast: false,\n        pets: false,\n    };\n    // getData\ngetData = async () =>{\n    try {\n        let response = await items.getEntries({\n            content_type:\"resorthome\",\n            order:\"sys.createdAt\"\n        });\n\n        // this is to get the contentful data\n        // let homes = this.formatData(response.items);\n        // below is the version get the local data\n        let homes = this.formatData(items);\n       \n        // let featuredhomes = homes.filter(home => home.featured === true);\n      let maxPrice = Math.max(...homes.map(item=> item.price));\n      let maxSize = Math.max(...homes.map(item=> item.size));\n\n        this.setState({\n            homes,\n            // featuredhomes,\n            sortedHomes: homes,\n            loading: false,\n            price:maxPrice,\n            maxPrice,\n            maxSize,\n        });\n    } catch (error) {\n       console.log(error);\n        \n    }\n}\n\n\n    componentDidMount() {\n        this.getData()\n    //     let homes = this.formatData(items)\n    //     // console.log(\"homes:\", homes)\n    //     let featuredhomes = homes.filter(home => home.featured === true);\n    //   let maxPrice = Math.max(...homes.map(item=> item.price));\n    //   let maxSize = Math.max(...homes.map(item=> item.size));\n\n    //     this.setState({\n    //         homes,\n    //         featuredhomes,\n    //         sortedhomes: homes,\n    //         loading: false,\n    //         price:maxPrice,\n    //         maxPrice,\n    //         maxSize,\n    //     });\n    }\n\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id\n            let images = item.fields.images.map(image => image.fields.file.url);\n\n            let home = { ...item.fields,images,id }\n            return home;\n        });\n        return tempItems;\n    }\n    getHome = (slug) => {\n        let tempHomes = [...this.state.homes];\n        const home = tempHomes.find(home=> home.slug===slug);\n        return home;\n    }\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === 'checkbox'?target.checked:target.value;\n        const name = event.target.name;\n        this.setState({\n            [name]:value\n        },\n        this.filterhomes)  \n    };\n    filterhomes = ()=>{\n       let {\n           homes, type, capacity, price, minSize, maxSize, breakfast, pets\n       } = this.state\n    //    all the homes\n       let temphomes =[...homes];\n    //    trasform values\n    capacity = parseInt(capacity);\n    price = parseInt(price);\n\n    // filter by type\n\n       if(type !== 'all'){\n           temphomes = temphomes.filter(home => home.type === type)\n       }\n\n    //    filter by capacity\n    if(capacity !==1){\n        temphomes = temphomes.filter(home => home.capacity >= capacity);\n    }\n// filter by price\ntemphomes=temphomes.filter( home => home.price <= price);\n// filter by size\ntemphomes=temphomes.filter(home => home.size >= minSize && home.size <= maxSize)\n// filter by breakfast\nif(breakfast){\n    temphomes= temphomes.filter(home => home.breakfast === true)\n}\n// filter by pets\nif(pets){\n    temphomes= temphomes.filter(home => home.pets === true)\n}\n\n\n    // change state\n       this.setState({\n           sortedhomes:temphomes\n       })\n        \n    };\n\n\n    render() {\n        return (\n            <HomeContext.Provider\n                value={{ ...this.state, gethome:this.gethome, handleChange:this.handleChange }}>\n                {this.props.children}\n            </HomeContext.Provider>\n\n\n        );\n    }\n}\n\n\nconst HomeConsumer = homeContext.Consumer;\n\nexport function withHomeConsumer(Component){\n    return function ConsumerWrapper(props){\n        return (\n        <HomeConsumer>\n            {value => <Component {...props} context={value}/>}\n        </HomeConsumer>\n        );\n    };\n}\n\n\n\nexport { HomeProvider, HomeConsumer, HomeContext };"]},"metadata":{},"sourceType":"module"}